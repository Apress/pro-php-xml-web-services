<html>
<body>
<?php
/* BEGINNGING OF USER VARIABLES */
/* Location of PAD Specification File */
$padspec = "http://www.padspec.org/pad_spec.xml";

/* Location of PAD Template Generated by DOM */
$padtemplate = "padtemplate.xml";

/* Name of PAD File to Save Results to */
$savefile = "padout.xml";
/* END OF USER VARIABLES */

/* Output field name/values for input and preview based on state of $bPreview */
function printDisplay($sxe, $sxetemplate, $bPreview) {
   $section = "";
   /* Loop through the Field nodes of the specification */
   foreach ($sxe->Fields->Field as $field) {
      /* Get the node path used in the template */
      $arPath = explode("/", trim($field->Path));
      array_shift($arPath);
      /* Skip MASTER_PAD_VERSION_INFO nodes.
         Values for these are set by template generator */
      if ($arPath[0] != "MASTER_PAD_VERSION_INFO") {
         if ($arPath[0] != $section) {
            $section = $arPath[0];
            print "<p>".str_replace("_"," ", $section)."</p>";
        }
        $input_value = getStoredValue($sxetemplate, $arPath);
        array_shift($arPath);
        print "\n".$field->Title.': ';
        if ($bPreview) {
           print $input_value."<br>";
        } else {
           $input_name = $section;
           /* Generate the field name using named based keys for an array */
           foreach ($arPath AS $key=>$value) {
              $input_name .= "[$value]";
           }
           print '<input type="text" name="'.$input_name.
                 '" value="'.$input_value.'"><br>';
        }
      }
   }
}

/* Retrieve text content for node from working template */
function getStoredValue($sxe, $arPath) {
  if ($sxe) {
      /* Loop through node path to find SimpleXML element from working template */
      foreach($arPath AS $key=>$value) {
         $sxe = $sxe->$value;
      }
      return (string)$sxe;
   }
   return "";
}

/* Set the text content for a node from working template */
function setValue($sxe, $field, $value) {
   if (is_array($value)) {
      /* Loop through node path to find SimpleXML element from working template */
      foreach ($value AS $fieldname=>$fieldvalue) {
         setValue($sxe->$field, $fieldname, $fieldvalue);
      }
   } else {
      /* Encode the value to einsure content will be valid XML */
      $sxe->$field = htmlentities($value);
   }
}

/* Validate fields in working template using the RegEx defined in specification */
function validatePAD($spec, $template) {
   $arRet = array();
   foreach ($spec->Fields->Field as $field) {
      $arPath = explode("/", trim($field->Path));
      array_shift($arPath);
      if ($arPath[0] != "MASTER_PAD_VERSION_INFO") {
         $sxe = $template;
         $regex = "/".trim($field->RegEx)."/";
         foreach($arPath AS $key=>$value) {
            $sxe = $sxe->$value;
            if (! $sxe) {
               break;
            }
         }
         if ($sxe) {
            $value = (string)$sxe;
            if (! preg_match($regex, $value)) {
               /* Capture fields failing validation for later display */
               $arRet[] = array($field->Title, $field->RegExDocumentation);
            }
         }
      }
   }
   /* Return array containing any captured errors */
   return $arRet;
}

/* Initial states for application variables */
$sxetemplate = NULL;
$bPreview = FALSE;
$bError = FALSE;
$bSave = FALSE;

/* BEGIN ACTUAL PROCESSING */
if ($sxe = simplexml_load_file($padspec)) {
   if (isset($_POST['Save']) || isset($_POST['Preview']) || isset($_POST['Edit'])) {
      /* Working template in hidden field is Base64 encoded and must be decoded */
      $sxetemplate = new SimpleXMLElement(base64_decode($_POST['ptemplate']));
      /* Loop through $_POST vars. vars that are arrays are PAD fields to be set */
      foreach($_POST AS $name=>$value) {
         if (is_array($value)) {
            setValue($sxetemplate, $name, $value);
         }
      }
      if (isset($_POST['Save'])) {
         /* Save finalized working template to file */
         $sxetemplate->asXML($savefile);
         $bSave = TRUE;
      } elseif (isset($_POST['Preview'])) {
         /* Validate the working template */
         $arRet = validatePAD($sxe, $sxetemplate);
         if (count($arRet) > 0) {
            $bError = TRUE;
            print "<B>ERRORS FOUND</B><br>";
            /* Print out errors returned from validatePAD() */
            foreach ($arRet AS $key=>$value) {
               print $value[0].": ".$value[1]."<br>";
            }
         } else {
            /* Working template was validated so allow data to be previewed */
            $bPreview = TRUE;
         }
      }
   } else {
      /* Initial entry point so load the PAD template created from DOM */
      $sxetemplate = simplexml_load_file($padtemplate);
   }
   /* If in working state display the working template for editing or preview */
   if (! $bSave) {
      print '<form method="POST">';
      /* Base64-encoded working template to allow XML to be passed 
         in hidden field */
      print '<input type="hidden" name="ptemplate" value="'.
            base64_encode($sxetemplate->asXML()).'">';
      printDisplay($sxe, $sxetemplate, $bPreview);
      print '<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.
            '<input type="Submit" name="Preview" value="Preview and Validate PAD">';
      if (!$bError && isset($_POST['Preview'])) {
         /* Working template is valid and in preview mode.
            Allow additional editing or final Save */
         print '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.
               '<input type="Submit" name="Edit" value="Edit PAD">';
         print '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.
               '<input type="Submit" name="Save" value="Save PAD">';
      }
      print '</form><br><br>' ;
   } else {
      /* Final PAD file has been saved - Just print message */
      print "PAD File Saved as $savefile";
   }
} else {
   /* Application unable to retrieve the specification file - Error */
   print "Unable to load PAD Specification File";
}
?>
</body>
</html>